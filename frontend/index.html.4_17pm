<!DOCTYPE html>
<html>
  <head>
    <title>Upload file to S3</title>
    <script src="https://unpkg.com/vue@1.0.28/dist/vue.js"></script>
    <script src="https://unpkg.com/axios@0.2.1/dist/axios.min.js"></script>
  </head>
  <body>
    <div id="app">
      <h1>S3 Uploader Test</h1>
  
      <div v-if="!image">
        <h2>Select an image</h2>
        <input type="file" @change="onFileChange" accept="image/jpeg">
      </div>
      <div v-else>
        <img :src="image" />
        <button v-if="!uploadURL" @click="removeImage">Remove image</button>
        <button v-if="!uploadURL" @click="uploadImage">Upload image</button>
      </div>
      <h2 v-if="uploadURL">Success! Image uploaded to bucket.</h2>

      <!-- New section for image history -->
      <div class="history-section">
        <h2>Upload History</h2>
        <div v-for="item in imageHistory" :key="item.imageKey" class="image-item">
          <img :src="item.imageUrl" alt="Uploaded image">
          <div>
            <div>Uploaded: {{ new Date(item.uploadDate).toLocaleString() }}</div>
            <div :class="{'status-good': item.status === 'good', 'status-defective': item.status === 'defective'}">
              Status: {{ item.status }}
            </div>
          </div>
        </div>
      </div>
    </div>
  
    <script>
      const MAX_IMAGE_SIZE = 5000000

      /* ENTER YOUR ENDPOINT HERE */

      const API_ENDPOINT = 'https://n630xe5nu0.execute-api.us-east-1.amazonaws.com' // e.g. https://ab1234ab123.execute-api.us-east-1.amazonaws.com/uploads

      new Vue({
        el: "#app",
        data: {
          image: '',
          uploadURL: '',
          imageHistory: []
        },
        mounted() {
          this.loadHistory()
        },
        methods: {
          onFileChange (e) {
            let files = e.target.files || e.dataTransfer.files
            if (!files.length) return
            this.createImage(files[0])
          },
          createImage (file) {
            let reader = new FileReader()
            reader.onload = (e) => {
              console.log('length: ', e.target.result.includes('data:image/jpeg'))
              if (!e.target.result.includes('data:image/jpeg') && !e.target.result.includes('data:image/jpg')) {
                return alert('Wrong file type - JPG only.')
              }
              if (e.target.result.length > MAX_IMAGE_SIZE) {
                return alert('Image is too large.')
              }
              this.image = e.target.result
            }
            reader.readAsDataURL(file)
          },
          removeImage: function (e) {
            console.log('Remove clicked')
            this.image = ''
          },
          uploadImage: async function (e) {
            console.log('Upload clicked')
            // Get the presigned URL
            const response = await axios({
              method: 'GET',
              url: `${API_ENDPOINT}/uploads`
            })
            console.log('Response: ', response)

            // Extract data from response
            const { uploadURL, imageKey } = response  // Get both uploadURL and imageKey

            console.log('Uploading: ', this.image)
            let binary = atob(this.image.split(',')[1])
            let array = []
            for (var i = 0; i < binary.length; i++) {
              array.push(binary.charCodeAt(i))
            }
            let blobData = new Blob([new Uint8Array(array)], {type: 'image/jpeg'})
            console.log('Uploading to: ', response.uploadURL)
            const result = await fetch(response.uploadURL, {
              method: 'PUT',
              body: blobData
            })
            console.log('Result: ', result)
            // Final URL for the user doesn't need the query string params
            this.uploadURL = response.uploadURL.split('?')[0]
            
            // Trigger image analysis
            // Trigger image analysis with the imageKey from the response
            if (imageKey) {
                await this.analyzeImage(imageKey)
            } else {
                console.error('No imageKey received from upload')
            }
            
            // Reload history
            this.loadHistory()
          },
          async analyzeImage(imageKey) {
            try {
              console.log('Analyzing image with key:', imageKey)  // Add debug log
              const response = await axios.post(`${API_ENDPOINT}/analyze-image`, { 
                  imageKey: imageKey  // Make sure to send as an object
              })
              console.log('Analysis result:', response)
            } catch (error) {
              console.error('Error analyzing image:', error)
              console.error('Error details:', error.response?.data)  // Add more error details
            }
          },
          async loadHistory() {
            try {
              const response = await axios.get(`${API_ENDPOINT}/get-history`)
              this.imageHistory = response.data.items
            } catch (error) {
              console.error('Error loading history:', error)
            }
          }
        }
      })
    </script>
    <style type="text/css">
      body {
        background: #20262E;
        padding: 20px;
        font-family: sans-serif;
      }
      #app {
        background: #fff;
        border-radius: 4px;
        padding: 20px;
        transition: all 0.2s;
        text-align: center;
      }
      #logo {
        width: 100px;
      }
      h2 {
        font-weight: bold;
        margin-bottom: 15px;
      }
      h1, h2 {
        font-weight: normal;
        margin-bottom: 15px;
      }
      a {
        color: #42b983;
      }
      img {
        width: 30%;
        margin: auto;
        display: block;
        margin-bottom: 10px;
      }
      .history-section {
        margin-top: 20px;
      }
      .image-item {
        margin: 10px 0;
        padding: 10px;
        border: 1px solid #ddd;
        display: flex;
        align-items: center;
      }
      .image-item img {
        max-width: 100px;
        margin-right: 20px;
      }
      .status-good {
        color: green;
      }
      .status-defective {
        color: red;
      }
    </style>
  </body>
</html>
